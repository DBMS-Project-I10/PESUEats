-- psql -a -f create.sql
-- lowercase DB name (will need to enclose in double 
-- quotes for capital)
-- DROP DATABASE IF EXISTS pesu_eats;
-- CREATE DATABASE pesu_eats;

\c pesu_eats

-- Create tables
-- 
CREATE TABLE RESTAURANT 
(
    Rid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    RhasWid INT UNIQUE NOT NULL,
    Remail EMAIL_FIELD UNIQUE NOT NULL,
    RName NAME_FIELD NOT NULL,
    RLocation LOCATION_FIELD NOT NULL,
    RRating RATING_FIELD,
    RCuisine NAME_FIELD
);

CREATE TABLE MENU_ITEM 
(
    Iid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    IinMenuRid INT NOT NULL,
    IName NAME_FIELD NOT NULL,
    IPrice MONEY_FIELD NOT NULL,
    IDescription DESCRIPTION_FIELD,
    ICategory NAME_FIELD
);

CREATE TABLE MENU_ITEM_IN_CART
(
    MIid INT,
    MICartId INT,
    MICartCustId INT,
    PRIMARY KEY(MIid, MICartId, MICartCustId),
    MIQuantity INTEGER NOT NULL
);

CREATE TABLE CART 
(
    CartId INT GENERATED ALWAYS AS IDENTITY,
    CartCustId INT,
    PRIMARY KEY(CartId, CartCustId),
    CartStatus STATUS_FIELD NOT NULL,
    CartTotalBillAmount MONEY_FIELD,
    CartTaxAmount MONEY_FIELD,
    CartDeliveryAmount MONEY_FIELD
);

CREATE TABLE CUSTOMER
(
    CustId INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CustHasAWid INT UNIQUE NOT NULL,
    CustLoc LOCATION_FIELD,
    CustPhone PHONE_FIELD NOT NULL,
    CustAddr ADDR_FIELD NOT NULL,
    CustName NAME_FIELD NOT NULL,
    CustEmail EMAIL_FIELD
);

CREATE TABLE DA
(
    DAid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DAemail EMAIL_FIELD UNIQUE NOT NULL,
    DAhasWid INT UNIQUE NOT NULL,
    DAName NAME_FIELD NOT NULL,
    DALocation LOCATION_FIELD
);

CREATE TABLE FOOD_ORDER
(
    Oid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    OfromRid INT NOT NULL,
    ODAid INT,
    OtoCartId INT NOT NULL,
    OtoCartCustId INT NOT NULL,
    OETA TIMESTAMP,
    OStatus STATUS_FIELD NOT NULL,
    OPlacedDateTime TIMESTAMP
);

CREATE TABLE WALLET
(
    Wid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    Wamount MONEY_FIELD NOT NULL
);

CREATE TABLE ORDER_TRANSACTION
(
    Tid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TfromWid INT NOT NULL,
    TtoWid INT NOT NULL,
    Tamount MONEY_FIELD NOT NULL,
    Tdatetime TIMESTAMP
);

-- Constraints

-- RESTAURANT
ALTER TABLE RESTAURANT ADD CONSTRAINT FK_RHASWID FOREIGN KEY(RhasWid) REFERENCES WALLET(Wid);

-- MENU_ITEM
ALTER TABLE MENU_ITEM ADD CONSTRAINT FK_IINMENURID FOREIGN KEY(IinMenuRid) REFERENCES RESTAURANT(Rid) ON DELETE CASCADE;


-- MENU_ITEM_IN_CART
ALTER TABLE MENU_ITEM_IN_CART ADD CONSTRAINT FK_MIID FOREIGN KEY(MIid) REFERENCES MENU_ITEM(Iid);
-- ALTER TABLE MENU_ITEM_IN_CART ADD CONSTRAINT FK_MICARTID FOREIGN KEY(MICartId) REFERENCES CART(CartId);
-- ALTER TABLE MENU_ITEM_IN_CART ADD CONSTRAINT FK_MICARTCUSTID FOREIGN KEY(MICartCustId) REFERENCES CART(CustId);
ALTER TABLE MENU_ITEM_IN_CART ADD CONSTRAINT FK_MICARTID FOREIGN KEY(MICartId, MICartCustId) REFERENCES CART(CartId, CartCustId);

-- CART
ALTER TABLE CART ADD CONSTRAINT FK_CUSTID FOREIGN KEY(CartCustId) REFERENCES CUSTOMER(CustId);

-- CUSTOMER
ALTER TABLE CUSTOMER ADD CONSTRAINT FK_CUSTHASAWID FOREIGN KEY(CustHasAWid) REFERENCES WALLET(Wid);

-- DA
ALTER TABLE DA ADD CONSTRAINT FK_DAHASWID FOREIGN KEY(DAhasWid) REFERENCES WALLET(Wid);

-- FOOD_ORDER
ALTER TABLE FOOD_ORDER ADD CONSTRAINT FK_OFROMRID FOREIGN KEY(OfromRid) REFERENCES RESTAURANT(Rid);
ALTER TABLE FOOD_ORDER ADD CONSTRAINT FK_ODAID FOREIGN KEY(ODAid) REFERENCES DA(DAid);
--ALTER TABLE FOOD_ORDER ADD CONSTRAINT FK_OTOCUSTID FOREIGN KEY(OtoCustId) REFERENCES CUSTOMER(CustId);
-- ALTER TABLE FOOD_ORDER ADD CONSTRAINT FK_OTOCARTID FOREIGN KEY(OtoCartId) REFERENCES CART(CartId);
-- ALTER TABLE FOOD_ORDER ADD CONSTRAINT FK_OTOCARTCUSTID FOREIGN KEY(OtoCartCustId) REFERENCES CART(CartCustId);
ALTER TABLE FOOD_ORDER ADD CONSTRAINT UNQ_OTOCARTID_OTOCARTCUSTID UNIQUE(OtoCartCustId, OtoCartId);

-- ORDER_TRANSACTION
ALTER TABLE ORDER_TRANSACTION ADD CONSTRAINT FK_TFROMWID FOREIGN KEY(TfromWid) REFERENCES WALLET(Wid);
ALTER TABLE ORDER_TRANSACTION ADD CONSTRAINT FK_TTOWID FOREIGN KEY(TtoWid) REFERENCES WALLET(Wid);

---- GRANT permissions

GRANT SELECT ON RESTAURANT TO customer ;
GRANT SELECT ON FOOD_ORDER TO customer ;
GRANT SELECT ON WALLET TO customer ;
GRANT SELECT ON CART TO customer ;
GRANT SELECT ON MENU_ITEM TO customer ;
GRANT SELECT ON DA TO customer ;
GRANT ALL ON CUSTOMER TO customer ;
GRANT ALL ON MENU_ITEM_IN_CART TO customer ;


GRANT ALL ON RESTAURANT TO restaurant ;
GRANT SELECT, UPDATE ON FOOD_ORDER TO restaurant ;
GRANT SELECT ON WALLET TO restaurant ;
GRANT SELECT ON CART TO restaurant ;
GRANT SELECT ON CUSTOMER TO restaurant ;
GRANT SELECT ON DA TO restaurant ;
GRANT ALL ON MENU_ITEM TO restaurant ;

GRANT SELECT , UPDATE ON RESTAURANT TO wallet ;
GRANT SELECT ON FOOD_ORDER TO wallet ;
GRANT ALL ON WALLET TO wallet ;
GRANT SELECT ON CART TO wallet ;
GRANT SELECT , UPDATE ON CUSTOMER TO wallet ;
GRANT SELECT , UPDATE ON DA TO wallet ;
GRANT ALL ON ORDER_TRANSACTION TO wallet ;


GRANT SELECT ON RESTAURANT TO da ;
GRANT SELECT, UPDATE ON FOOD_ORDER TO da ;
GRANT SELECT ON WALLET TO da ;
GRANT SELECT ON CART TO da ;
GRANT SELECT ON CUSTOMER TO da ;
GRANT ALL ON DA TO da ;


GRANT ALL ON FOOD_ORDER TO ordermanager ;
GRANT ALL ON CART TO ordermanager ;


CREATE OR REPLACE FUNCTION cart_add() 
RETURNS trigger
LANGUAGE plpgsql
AS 
$$
    begin
    update cart 
    set CartTotalBillAmount = CartTotalBillAmount + (select Iprice from menu_item where iid = new.miid) * new.MIQuantity
    where cartid = new.micartid and cartcustid = new.micartcustid;
    return new;
    end;
$$;

CREATE OR REPLACE FUNCTION cart_remove() 
RETURNS trigger
LANGUAGE plpgsql
AS 
$$
    begin
    update cart 
    set CartTotalBillAmount = CartTotalBillAmount - (select Iprice from menu_item where iid = old.miid) * old.MIQuantity
    where cartid = old.micartid and cartcustid = old.micartcustid;
    return old;
    end;
$$;

CREATE OR REPLACE FUNCTION taxupdate() 
RETURNS trigger
LANGUAGE plpgsql
AS 
$$
    begin
    update cart 
    set CartTaxAmount = CartTotalBillAmount * 0.15;
    return new;
    end;
$$;

CREATE TRIGGER update_tax 
after update of CartTotalBillAmount on CART 
for each row 
execute procedure taxupdate();


CREATE TRIGGER updatecart_on_add 
after insert on MENU_ITEM_IN_CART 
for each row 
execute procedure cart_add();

CREATE TRIGGER updatecart_on_remove
after delete on MENU_ITEM_IN_CART 
for each row 
execute procedure cart_remove();